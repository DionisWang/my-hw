Sorts-
	Merge Sort = divide and conquer = nlogn.
	Insertion Sort = n^2.
	Selection Sort = n^2.
	Bubble Sort = n^2.
	worst case = most important
	Overall matters so in the long run.
O(n) order n is linear
Linear search= loop through and search.
Selection Agorithms
10,3,9,7,14,2,5,6,3,12,1,,8,11
kth smallest number
nlgn+k O(nlgn) Sort then find nth element
Other way:
	return 1st smallest up to k. O(n^2).
	Partition the array- rewrite such that every element less than nine(the pivot) is to to is left and the other to its right.
	!.Select the pivot.
	2.Partition the array around.
	3.Repeat 1-2 until done.
Times-
	max 2n least n.
	Insertion Sort  100000    3.5 sec
	Selection Sort  50000     3.5 sec
	Merge Sort      10000000  4~5 sec
			40000000  17  sec
               		50000000  Out of heap!
	Quick Sort      10000000  9   sec
	Quick Sort Worst Case = n^2.
	Quick Sort Best Case = nlgn.
Test Correction
	2.2 RemoveCross
		loop through row then loop again to move it.
		loop through column then loop again to move it.
		make the end row and column 0s.
	3 fillgrid
		recursive loop through possible adjacent squares.
		Note: java goes through if, first to second statement so if check parameter before check grid[x][y] fails 			the program won't get to grid[x][y] and crash.
Linked list
	a list where one object points to the next without size are definite placement.
	When adding to Linked list first set what new element points to then tell a player to point to other player. If done in 		incorrect order will lost a part of the list.
	Creation in java(Node)
	n1=new node uses block of mem which stores location data.
	length(){
	return length;
	make instance variable length. Then do +1 or -1 for add and remove functions.
	LinkedList had head current and tail in doublylinkedlist
	priciple of locality data near data.
	iterable = constant time. 
proxy-
	chrome/tools/editpreferences/advanced setting/network/proxy/ manual
	repeat x2{
	149.89.1.30
	3128
stack of something
Stack:
	push()-adds item to top of the stack.
	pop()-removes the top item of the stack and returns it.
	peek()-returns top element without removing it.
	Last in first out (LIFO)
	| f3 |
	| f2 |
	| f1 |
	|main|
stack-
	single linked list
	add to front 
	no need for dummy node.
hp 48 calculators > TI calculators
postfix/reverse polish notation
a+b is infix notation-
	Ambiguous
	need order of operation
	great for algebra.
(+ a b) is prefix/functional notation-
	prefix has no ambiguity.
	+ 1 2 3 4 5 no order of operation.
postfix/rpn-
	3 enter 4 enter +
RPN calculator-
	get input
	if it's a number push it on the stack
	in an operation pop top 2 items do operation and push result 
	back on the stack.
RPN miniproject-
	read input for String by scanner.
	if the input is +,-,*,/
	takes 2 top 2 on stack calculate then push back.
switch(input){
	case(if) "+": ans = first + second: break:
	case(else if) "-": ans = first - second: break(goes to the end)
	n=0(else)
}
Queue(FIFO)
	q.enqueue(x)-adds x to the back of the queue.
	q.dequeue(x)-return x in the front of the q.
	q.isEmpty().
	q.front()-like peek().
http://stuycs-apcs-z.github.io/assignments.html
news.ycombinator.com
Array Queue
Method 1- 
	enqueue - adds to array adds 1 to tail.
	dequeue - removes and shift a[0].
Method 2- 
	enqueue - adds to array adds 1 to tail.
	dequeue - remove array[n] head++ if(full) shift everything time.
Method 3- 
	enqueue - adds 1 to tail.(wrapping around).
	dequeue - removes n and adds to head.(wrapping around).
arrays lists and linkedlists are linear before and after only.
Graphs- 
	a collection of nodes and edges
	nodes contain information
	edges connect nodes(and sometimes also a data)
Trees-
	*Definition 1* - empty or a connected a cyclic graph with one node designated as the root.
	*Definition 2* - empty or contains one noded called the root the root can have 0 or more children nodes. each of which can have 0 		or more children nodes.
				Example (Tree)
				  (A)-root
				/  |  \
			      (B) (C) (D)
			       |  / \
			      (E)(F)(G)
1	B,C,D are children of A
4	A is the parent of B,C,D
9	B,C,D are siblings.
8	B,C are internal nodes
9	E,F,G,D are leaf nodes (nodes with 0 children).
1	Height- loosely defined in this case 2, or 3
7	Descendants- all children after node.
9	Ancestors- all nodes leading from the node to root
1	Full and Balance depends on trees
Binary Tree-
	has one or two children all the time.
Binary Search Tree-
	given any node n with value v, all nodes on the left subtree have values < v and all nodes on the right subtree have values > v.
	public Node search(int i){
	   Node x = root;
	   while(x!=null&&x.getData()!=i){
		if(x.getData()>i){
		   x=x.getLeft();
		}else{
		   x=x.getRight();
	   	}
	   }
	   return x;
	}
	public void insert(int i){
	   Node x = root;
	   while(x.getLeft()!=null&&x.getRight()!=null){
		if(x.getData()>i){
		   x=x.getLeft();
		}else{
		   x=x.getRight();
	   	}
	   }
	   if(x.getData()<i){
		x.setRight(new Node(i));
	   }else{
		x.setLeft(new Node(i));
	   }
	}
	Insertion - always insert as a new leaf
	1.Search for the value	(make sure to stop before null).
	
	Delete-3 cases
	we need a pointer to the parent of the node we want to delete.
	piggyback search or use recursion.
	(1) the node to delete is a leaf - set parent left or right pointer to null
	(2) node has 1 child- set node left or right to child's left or right (not null nodes). There are 4 cases.
	(3)node has 2 children- replace the deleted value with largest from left subtree.we find it by going to the left child and as far right as we can go. Then delete the node copied out.
	Special case- root gets deleted. Cheat buy using dummy node. smallest possible value.

		Linked List                    Binary Search Tree
		Unsorted List   Sorted List
    	Search  O(log n)        O(log n)       Best case (log n) 
					       Worst case O(n)
	insert  O(1)            O(n)           same as search
	delete  O(n)            O(n)           same as search
	Trasversal O(n)         O(n)           O(n)
Heaps-
	-binary tree
	-as full as possible from left to right.
	-if given any node n its value v is greater than the values of either of its children it is a maxheap.
	if given any node n its value v is less than the values of either of its children it is a minheap.
	findMax() is O(1) it is the root in a maxheap.
	removeMax()- O(nlogn) -
		1.remove max.
		2.replace root with lowest rightest element.
		3.pushDown() - O(logn) -
			while(n is less than any children swap with greater value children.
	add()- O(nlogn) -
		1.add element as lowest rightest.
		2.siftUp() - O(logn) -
			swap node with parent if parent less than it restores heap property.
Given node at location n its children is at 2n and 2n+1.
Given node at n its parent is n/2.
Using an array to map the heap.
!Don't forget to adjust for the 0 in the array.
Data Structures- depending on goals make what you have to.
Hash function- 
	a function that maps a key value onto another value used as a data base index.
Hash table-
	array based data structure where you use hash function to convert key into array index.
